package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate joinPredicate;
    private OpIterator child1;
    private OpIterator child2;
    Tuple t;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        joinPredicate=p;this.child1=child1;this.child2=child2;
    }

    public JoinPredicate getJoinPredicate() {
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return child2.getTupleDesc().getFieldName(joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1.getTupleDesc(),child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        child1.open();child2.open();
    }

    public void close() {
        super.close();
        child1.close();child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        while(child1.hasNext()){
            if(t == null) t = child1.next();
            while(child2.hasNext()){
                Tuple t2 = child2.next();
                if(joinPredicate.filter(t,t2)){
                    Tuple newTuple = new Tuple(getTupleDesc());
                    newTuple.setRecordId(t.getRecordId());
                    int n1 = t.getTupleDesc().numFields();
                    int n2 = t2.getTupleDesc().numFields();
                    for(int i=0;i<n1;i++)
                        newTuple.setField(i,t.getField(i));
                    for(int j=0;j<n2;j++)
                        newTuple.setField(n1+j,t2.getField(j));
                    return newTuple;
                }
            }
            child2.rewind();
            t = null;
        }
        return null;
    }


    @Override
    public OpIterator[] getChildren() {
        List<OpIterator> a=new ArrayList<>();
        try{
            do{
                a.add(child1);
            }
            while(child1.hasNext());
            do {
                a.add(child2);
            }
            while(child2.hasNext());
        }catch (Exception e){
            e.printStackTrace();
        }
        OpIterator[] b=new OpIterator[a.size()];
        for(int i=0;i<a.size();i++){
            b[i]=a.get(i);
        }
        return b;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        int i=0;
        try{
            do{
                child1=children[i++];
            }
            while(child1.hasNext());
            do{
                child2=children[i++];
            }
            while(child2.hasNext());
        }catch (Exception e){
            e.printStackTrace();
        }
    }

}
